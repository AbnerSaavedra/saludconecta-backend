// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEDICO
  ASISTENTE
}

enum EstadoUsuario {
  Activo
  Suspendido
}

enum EstadoPieza {
  SANO
  CARIES
  ENDODONCIA
  EXTRACCION
  OBSERVACION
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  roles           Role[]
  name            String
  specialty       String?
  telefono        String?
  direccion       String?
  fechaNacimiento DateTime?
  estado          EstadoUsuario @default(Activo)
  createdAt       DateTime @default(now())

  // 游대 Relaciones inversas
  odontograma     Odontograma[]
  citas           Cita[]
  intervenciones  Intervencion[] @relation("Interventor")
  exportaciones   Intervencion[] @relation("Exportador")
  creadoPacientes Paciente[]     @relation("CreadoPor")
  modificadoPacientes Paciente[] @relation("ModificadoPor")
}


model Paciente {
  id              Int      @id @default(autoincrement())
  cedula          String   @unique
  nombre          String
  apellido        String
  fechaNacimiento DateTime
  telefono        String?
  correo          String?
  direccion       String?
  creadoEn        DateTime @default(now())
  actualizadoEn   DateTime @updatedAt

  // 游대 Auditor칤a
  creadoPorId     String?
  modificadoPorId String?
  creadoPor       User?    @relation("CreadoPor", fields: [creadoPorId], references: [id])
  modificadoPor   User?    @relation("ModificadoPor", fields: [modificadoPorId], references: [id])

  // 游대 Relaciones cl칤nicas
  citas           Cita[]
  odontogramas    Odontograma[]
  intervenciones  Intervencion[]
}

model Cita {
  id           String   @id @default(uuid())
  fecha        DateTime
  hora         String
  motivo       String?
  estado       String   @default("PENDIENTE")
  especialidad String
  usuarioId    String
  pacienteId   Int
  createdAt    DateTime @default(now())

  usuario      User     @relation(fields: [usuarioId], references: [id])
  paciente     Paciente @relation(fields: [pacienteId], references: [id])
}

model Odontograma {
  id                  String   @id @default(uuid())
  pieza               String
  cuadrante           String?
  estado              EstadoPieza
  tratamientoSugerido String
  fecha               DateTime
  pacienteId          Int
  usuarioId           String
  createdAt           DateTime @default(now())

  paciente            Paciente @relation(fields: [pacienteId], references: [id])
  usuario             User     @relation(fields: [usuarioId], references: [id])
  intervenciones      Intervencion[]
}

model Intervencion {
  id                   String   @id @default(uuid())
  pieza                String
  tipo                 String?
  diagnostico          String
  tratamientoRealizado String?
  fecha                DateTime
  observaciones        String?
  creadoEn             DateTime @default(now())

  // 游대 Auditor칤a y exportaci칩n
  exportadoEn          DateTime?
  exportadoPorId       String?
  exportadoPor         User?    @relation("Exportador", fields: [exportadoPorId], references: [id])

  pacienteId           Int
  usuarioId            String
  odontogramaId        String

  paciente             Paciente     @relation(fields: [pacienteId], references: [id])
  usuario              User         @relation("Interventor", fields: [usuarioId], references: [id])
  odontograma          Odontograma  @relation(fields: [odontogramaId], references: [id])
}


